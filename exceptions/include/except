#pragma once

#include "impl/impl.hpp"
#include "objects/auto.hpp"
#include "types/types.hpp"
#include "utils/type_traits.hpp"

#define EXCEPT_DETAIL_GET_MACRO(ZERO, ONE, TWO, MACRO, ...) MACRO
#define EXCEPT_DETAIL_CONCAT_(a, b) a##b
#define EXCEPT_DETAIL_CONCAT(a, b) EXCEPT_DETAIL_CONCAT_(a, b)

#define EXCEPT_DETAIL_BUFF EXCEPT_DETAIL_CONCAT(except_detail_buff_, __LINE__)
#define EXCEPT_DETAIL_ONCE EXCEPT_DETAIL_CONCAT(except_detail_once_, __LINE__)

#define TRY                                                          \
    for (int* EXCEPT_DETAIL_BUFF = except::detail::Impl::StartTry(); \
         EXCEPT_DETAIL_BUFF != nullptr;                              \
         except::detail::Impl::FinishTry(),                          \
              std::exchange(EXCEPT_DETAIL_BUFF, nullptr))            \
        if (setjmp(EXCEPT_DETAIL_BUFF) == 0)

// clang-format off
#define EXCEPT_DETAIL_CATCH_IMPL_WITH_VAR(Type, name)                        \
    else if (except::detail::Impl::CanCatch<                                 \
                 except::detail::utils::type_traits::CatchType<Type>>())     \
        for (auto [name, EXCEPT_DETAIL_ONCE] =                               \
                 except::detail::Impl::Catch<                                \
                     except::detail::utils::type_traits::CatchType<Type>>(); \
             std::exchange(EXCEPT_DETAIL_ONCE, false);)
// clang-format on

#define EXCEPT_DETAIL_CATCH_IMPL(Type)         \
    else if (except::detail::Impl::MaybeCatch< \
                 except::detail::utils::type_traits::CatchType<Type>>())

#define EXCEPT_DETAIL_CATCH_ALL else if (except::detail::Impl::CatchAll())

#define CATCH(...)                                             \
    EXCEPT_DETAIL_GET_MACRO(ZERO __VA_OPT__(, )##__VA_ARGS__,  \
                            EXCEPT_DETAIL_CATCH_IMPL_WITH_VAR, \
                            EXCEPT_DETAIL_CATCH_IMPL,          \
                            EXCEPT_DETAIL_CATCH_ALL)           \
    __VA_OPT__((__VA_ARGS__))

template <except::detail::utils::concepts::Throwable Exception>
[[noreturn]] void Throw(
    Exception exception,
    std::source_location source_location = std::source_location::current()) {
    except::detail::Impl::Throw(except::detail::Data{exception},
                                source_location);
}

[[noreturn]] inline void Throw() {
    except::detail::Impl::Throw();
}
