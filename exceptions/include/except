#pragma once

#include "auto_object.hpp"
#include "exception.hpp"
#include "exception_stack.hpp"
#include "object_manager.hpp"
#include "throw.hpp"

#define TRY                                                \
    do {                                                   \
        except::detail::Node node;                         \
        except::detail::stack.push(&node);                 \
        except::detail::ObjectManager::RecordCheckpoint(); \
                                                           \
        volatile except::detail::Status status;            \
        status = static_cast<except::detail::Status>(      \
            setjmp(static_cast<int*>(node.buf)));          \
                                                           \
        if (status == except::detail::Status::NO_EXCEPTION) {

// clang-format off

#define CATCH(___exception_type)                                 \
        } else if (node.exception.type == (___exception_type)) { \
            status = except::detail::Status::HANDLED;

#define CATCH_ALL \
        } else {  \
            status = except::detail::Status::HANDLED;

#define RETHROW                                \
    except::detail::Throw(node.exception.type, \
                          node.exception.file, \
                          node.exception.line)

#define ENDTRY                                                 \
        }                                                      \
        if (status == except::detail::Status::NO_EXCEPTION) {  \
            except::detail::ObjectManager::PopCheckpoint();    \
            except::detail::stack.pop();                       \
        } else if (status == except::detail::Status::RAISED) { \
            RETHROW;                                           \
        }                                                      \
    } while(false)
// clang-format on

#define THROW(___exception_type) \
    except::detail::Throw(___exception_type, __FILE__, __LINE__)
