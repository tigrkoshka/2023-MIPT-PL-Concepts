include base.krm
include char.krm
include string.krm

.__digit.zero_char: char '0'
.__digit.a_char:    char 'a'

# Accepts two arguments: a base and a one-digit value of that base
#
# An error message is printed and the execution
# is exited with an error code 1 in the following cases:
#
#    - the base is less than 2 or greater than 36
#
#    - the value cannot be represented using a single digit
#      in the specified base (i.e. is greater or equal to the base)
__print_digit:
    # load the base into r0
    loadr r0 r14 3

    # check the base
    prc 0
    push r0 0
    calli __check_base

    # load the base back into r0 and the value into r1
    loadr2 r0 r14 3

    # check that value is less than base
    cmp r1 r0 0
    jge ____print_digit.value_not_less_than_base_error

    # if we passed all checks, we enter the unsafe part
    jmp __print_digit_unsafe

    .____print_digit.value_not_less_than_base_error_msg:
        string "error: the specified value cannot be represented using a single digit in the specified base"

    ____print_digit.value_not_less_than_base_error:
        # store the address of the error message string to r0
        la r0 .____print_digit.value_not_less_than_base_error_msg
        jmp ____print_digit.print_error_message_and_exit

    ____print_digit.print_error_message_and_exit:
        # prepare for call
        prc 0

        # push the address of the error string as the argument
        push r0 0

        # print the error string
        calli print_string

        # print a newline character
        prc 0
        calli print_newline

        # store the exit code 1 to r0
        lc r0 1

        # stop execution with exit code 1 from r0
        syscall r0 0

__print_digit_unsafe:
    # load the base into r0 and the value into r1
    loadr2 r0 r14 3

    # value <=> 10
    cmpi r1 10

    # if value >= 10, print it as a letter
    jge ____print_digit.as_latin_letter

    # ... else print it as a decimal digit
    # (this command is not needed since the decimal digit printing block comes
    # immediately after this, but we put it here as an else clause sample)
    #
    # jmp ____print_digit.as_decimal_digit

    # if value < 10 get the respective decimal digit by adding
    # the value of the '0' char to our value, print it and return
    ____print_digit.as_decimal_digit:
        # r0 = '0'
        load r0 .__digit.zero_char

        # r1 = r0 + r1 [= '0' + r1]
        add r1 r0 0

        # print the current digit (the decimal digit)
        syscall r1 105

        # return
        ret 0

    # if value >= 10, get the respective lowercase latin letter by adding
    # the value of the 'a' char to our value minus 10, print it and return
    #
    # note: the resulting char is guaranteed to be a lowercase latin letter
    # if we came here from the safe function __print_digit due to the checks
    # in it: 10 <= value < base <= 36, so the value is in range [10, 36),
    # so value - 10 is in range [0, 26) and there are exactly 26 latin letters
    # (this is the reason for the bound on the allowed base)
    ____print_digit.as_latin_letter:
        # r0 = 'a'
        load r0 .__digit.a_char

        # r1 = r0 + (r1 - 10) [= 'a' + (r1 - 10)]
        subi r1 10
        add r1 r0 0

        # print the current digit (the lowercase latin latter)
        syscall r1 105

        # return
        ret 0
