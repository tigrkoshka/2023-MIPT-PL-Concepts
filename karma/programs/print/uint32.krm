include base.krm
include digit.krm

# accepts two arguments: a base and a uint32 value to be printed
#
# if the base is less than 2 or greater than 36, an error message is printed,
# and the execution is exited with an error code 1
print_uint32:
    # load the base into r0
    loadr r0 r14 3

    # check the base
    prc 0
    push r0 0
    calli __check_base

__print_uint32_unsafe:
    # load the base into r0 and the uint32 value to r1
    loadr2 r0 r14 3

    # compare the value to the base
    cmp r1 r0 0

    # if the value is less than base print it as a digit and return ...
    jl __print_uint32.out

    # ... else recurse
    # (this command is not needed since the recurse block comes immediately
    # after this, but we put it here as an else clause sample)
    #
    # jmp __print_uint32.recurse

    # ... else recurse
    __print_uint32.recurse:
        # ensure (r2,r1) represent a uint64 value equal to the uint32 from r1
        # by setting the r2 register to 0
        lc r2 0

        # put value / base to r1,
        # and value % base to r2
        div r1 r0 0

        # save the remainder as a local variable
        push r2 0

        # prepare for call
        prc 0

        # push the base and the quotient as the arguments
        push r1 0
        push r0 0

        # recurse
        calli __print_uint32_unsafe

        # pop the remainder into r1 and then (when the local variables stack
        # segment becomes empty) load the base from the arguments into r0
        #
        # note that this is consistent with the case when we did not recurse:
        # in that case the value representing the digit to print was also in
        # the r1 register (the full initial value) and the base was in the r0
        # register
        pop r1 0
        loadr r0 r14 3

    __print_uint32.out:
        # prepare for call
        prc 0

        # push the base and the value as arguments
        push r1 0 # one-digit value (the second argument)
        push r0 0 # base            (the first argument)

        # print the current character
        #
        # use the unsafe method in "production mode" for efficiency
        # switch this to call the safe __print_digit in debug
        #
        # the safe function can only detect bugs and not user input related
        # errors, because the base was check in the beginning of
        # the print_uint32 function, and the function must not try to print
        # values greater than base by design
        calli __print_digit_unsafe

        # return
        ret 0

# like print_uint32, but accepts only the value argument and prints
# its decimal representation (i.e. defaults the base parameter to 10)
print_uint32_decimal:
    # load the uint32 value into r0
    loadr r0 r14 3

    # store the default base value (10) in r1
    lc r1 10

    # prepare for the print_uint32 call
    prc 0

    # push the base and the value as the arguments

    # value (the second argument)
    push r0 0

    # base (the first argument)
    push r1 0

    # reuse the printing function
    #
    # use the unsafe function, because there is no need to check the base
    # since 10 is a valid base
    calli __print_uint32_unsafe

    # return
    ret 0
