include ../char.krm
include ../string.krm
include ../double.krm

.enter_value_invite:
  string "Enter the double value: "
.enter_base_invite:
  string "Enter the base: "
.enter_precision_invite:
  string "Enter the precision: "

main:
    ############################################################################
    ####               Print the invitation to enter the value              ####
    ############################################################################

    # store the address of the invite string to r0
#    la r0 .enter_value_invite

    # prepare for the call
#    prc 0

    # push the address of the invite string as an argument
#    push r0 0

    # print the invite string
#    calli print_string

    ############################################################################
    ####                       Get the value from stdin                     ####
    ############################################################################

    # get the double value to print in (r1,r0)
    syscall r0 101

    # save the value as the local variable
    push r1 0
    push r0 0

    ############################################################################
    ####               Print the invitation to enter the base               ####
    ############################################################################

    # store the address of the invite string to r0
#    la r0 .enter_base_invite

    # prepare for the call
#    prc 0

    # push the address of the invite string as an argument
#    push r0 0

    # print the invite string
#    calli print_string

    ############################################################################
    ####                       Get the base from stdin                      ####
    ############################################################################

    syscall r0 100

    # save the base as the local variable
    push r0 0

    ############################################################################
    ####             Print the invitation to enter the precision            ####
    ############################################################################

    # store the address of the invite string to r0
#    la r0 .enter_precision_invite

    # prepare for the call
#    prc 0

    # push the address of the invite string as an argument
#    push r0 0

    # print the invite string
#    calli print_string

    ############################################################################
    ####                    Get the precision from stdin                    ####
    ############################################################################

    syscall r0 100

    ############################################################################
    ####              Get the base and the value from the stack             ####
    ############################################################################

    pop r1 0 # base (uint32)
    pop r2 0 # value (double, low bits)
    pop r3 0 # value (double, high bits)

    ############################################################################
    ####                   Call the print_double function                   ####
    ############################################################################

    # prepare for the call
    prc 0

    # push the precision as the third argument
    push r0 0

    # push the value as the second argument
    push r3 0
    push r2 0

    # push the base as the first argument
    push r1 0

    # call the printing function
    calli __print_double_fractional_part

    ############################################################################
    ####                      Print an additional '\n'                      ####
    ############################################################################

    prc 0
    calli print_newline

    ############################################################################
    ####                          Exit with code 0                          ####
    ############################################################################

    # set the exit code to 0
    lc r0 0

    # exit the program with code 0 from r0
    syscall r0 0
end main
