include string.krm

.zero_char:    char '0'
.a_char:       char 'a'
.newline_char: char '\n'

# accepts two arguments: a base and a one-digit value of that base
#
# an error message is printed and the execution
# is exited with an error code 1 in the following cases:
#
#    - the base is greater than 36
#
#    - the value cannot be represented using a single digit
#      in the specified base (i.e. is greater or equal to the base)
__print_digit:
    # load the base into r0 and the value in r1
    loadr2 r0 r14 3

    ############################################################################
    ####               Check that base is not greater than 36               ####
    ############################################################################

    cmpi r0 36
    jg ____print_digit.base_greater_than_36_error

    ############################################################################
    ####                 Check that value is less than base                 ####
    ############################################################################

    cmp r1 r0 0
    jge ____print_digit.value_not_less_than_base_error

    ############################################################################
    ####              Try to print the value as a decimal digit             ####
    ############################################################################

    # value <=> 10
    cmpi r1 10
    # if value >= 10, print it as a letter
    jge ____print_digit.as_latin_letter

    # if value < 10 get the respective decimal digit by adding
    # the value of the '0' char to our value, print it and return
    ____print_digit.as_decimal_digit:
        load r0 .zero_char
        add r1 r0 0
        syscall r1 105
        ret 0

    ############################################################################
    ####                  Print the value as a latin letter                 ####
    ############################################################################

    # if value >= 10, get the respective lowercase latin letter by adding
    # the value of the 'a' char to our value minus 10, print it and return
    #
    # note: the resulting char is guaranteed to be a lowercase latin letter
    # due to the checks above: 10 <= value < base <= 36, so the value is
    # in range [10, 36), so value - 10 is in range [0, 26) and there are exactly
    # 26 latin letters (this is the reason for the bound on the allowed base
    ____print_digit.as_latin_letter:
        load r0 .a_char
        subi r1 10
        add r1 r0 0
        syscall r1 105
        ret 0

    ############################################################################
    ####                               Errors                               ####
    ############################################################################

    .__print_digit.base_greater_than_36_error_msg:     string "cannot print a digit when the specified base is greater than 35"
    .__print_digit.value_not_less_than_base_error_msg: string "the specified value cannot be represented using a single digit in the specified base"

    ____print_digit.base_greater_than_36_error:
        # prepare for call
        push r13 0
        mov r13 r14 0

        # push the address of the error string as the argument
        la r0 .__print_digit.base_greater_than_36_error_msg
        push r0 0

        # print the error string
        calli print_string

        # store the exit code 1 to r0
        lc r0 1

        # stop execution with exit code 1 from r0
        syscall r0 0

    ____print_digit.value_not_less_than_base_error:
        # prepare for call
        push r13 0
        mov r13 r14 0

        # push the address of the error string as the argument
        la r0 .__print_digit.value_not_less_than_base_error_msg
        push r0 0

        # print the error string
        calli print_string

        # store the exit code 1 to r0
        lc r0 1

        # stop execution with exit code 1 from r0
        syscall r0 0
