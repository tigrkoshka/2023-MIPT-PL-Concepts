#pragma once

#include <cstdint>
#include <string>
#include <unordered_map>

#include "utils.hpp"

namespace karma {
namespace detail {

enum CommandCode : uint8_t {
    HALT    = 0,
    SYSCALL = 1,
    ADD     = 2,
    ADDI    = 3,
    SUB     = 4,
    SUBI    = 5,
    MUL     = 6,
    MULI    = 7,
    DIV     = 8,
    DIVI    = 9,
    LC      = 12,
    SHL     = 13,
    SHLI    = 14,
    SHR     = 15,
    SHRI    = 16,
    AND     = 17,
    ANDI    = 18,
    OR      = 19,
    ORI     = 20,
    XOR     = 21,
    XORI    = 22,
    NOT     = 23,
    MOV     = 24,
    ADDD    = 32,
    SUBD    = 33,
    MULD    = 34,
    DIVD    = 35,
    ITOD    = 36,
    DTOI    = 37,
    PUSH    = 38,
    POP     = 39,
    CALL    = 40,
    CALLI   = 41,
    RET     = 42,
    CMP     = 43,
    CMPI    = 44,
    CMPD    = 45,
    JMP     = 46,
    JNE     = 47,
    JEQ     = 48,
    JLE     = 49,
    JL      = 50,
    JGE     = 51,
    JG      = 52,
    LOAD    = 64,
    STORE   = 65,
    LOAD2   = 66,
    STORE2  = 67,
    LOADR   = 68,
    LOADR2  = 69,
    STORER  = 70,
    STORER2 = 71,
};

enum CommandFormat : uint8_t {
    RM = 0,
    RR = 1,
    RI = 2,
    J  = 3,
};

const utils::Map<CommandFormat, std::string> kFormatToString = {
    {RM, "RM"},
    {RR, "RR"},
    {RI, "RI"},
    {J,  "J" },
};

const utils::Map<CommandCode, CommandFormat> kCodeToFormat = {
    {HALT,    RI},
    {SYSCALL, RI},
    {ADD,     RR},
    {ADDI,    RI},
    {SUB,     RR},
    {SUBI,    RI},
    {MUL,     RR},
    {MULI,    RI},
    {DIV,     RR},
    {DIVI,    RI},
    {LC,      RI},
    {SHL,     RR},
    {SHLI,    RI},
    {SHR,     RR},
    {SHRI,    RI},
    {AND,     RR},
    {ANDI,    RI},
    {OR,      RR},
    {ORI,     RI},
    {XOR,     RR},
    {XORI,    RI},
    {NOT,     RI},
    {MOV,     RR},
    {ADDD,    RR},
    {SUBD,    RR},
    {MULD,    RR},
    {DIVD,    RR},
    {ITOD,    RR},
    {DTOI,    RR},
    {PUSH,    RI},
    {POP,     RI},
    {CALL,    RR},
    {CALLI,   J },
    {RET,     J },
    {CMP,     RR},
    {CMPI,    RI},
    {CMPD,    RR},
    {JMP,     J },
    {JNE,     J },
    {JEQ,     J },
    {JLE,     J },
    {JL,      J },
    {JGE,     J },
    {JG,      J },
    {LOAD,    RM},
    {STORE,   RM},
    {LOAD2,   RM},
    {STORE2,  RM},
    {LOADR,   RR},
    {STORER,  RR},
    {LOADR2,  RR},
    {STORER2, RR},
};

const utils::Map<std::string, CommandCode> kCommandToCode = {
    {"halt",    HALT   },
    {"syscall", SYSCALL},
    {"add",     ADD    },
    {"addi",    ADDI   },
    {"sub",     SUB    },
    {"subi",    SUBI   },
    {"mul",     MUL    },
    {"muli",    MULI   },
    {"div",     DIV    },
    {"divi",    DIVI   },
    {"lc",      LC     },
    {"shl",     SHL    },
    {"shli",    SHLI   },
    {"shr",     SHR    },
    {"shri",    SHRI   },
    {"and",     AND    },
    {"andi",    ANDI   },
    {"or",      OR     },
    {"ori",     ORI    },
    {"xor",     XOR    },
    {"xori",    XORI   },
    {"not",     NOT    },
    {"mov",     MOV    },
    {"addd",    ADDD   },
    {"subd",    SUBD   },
    {"muld",    MULD   },
    {"divd",    DIVD   },
    {"itod",    ITOD   },
    {"dtoi",    DTOI   },
    {"push",    PUSH   },
    {"pop",     POP    },
    {"call",    CALL   },
    {"calli",   CALLI  },
    {"ret",     RET    },
    {"cmp",     CMP    },
    {"cmpi",    CMPI   },
    {"cmpd",    CMPD   },
    {"jmp",     JMP    },
    {"jne",     JNE    },
    {"jeq",     JEQ    },
    {"jle",     JLE    },
    {"jl",      JL     },
    {"jge",     JGE    },
    {"jg",      JG     },
    {"load",    LOAD   },
    {"store",   STORE  },
    {"load2",   LOAD2  },
    {"store2",  STORE2 },
    {"loadr",   LOADR  },
    {"storer",  STORER },
    {"loadr2",  LOADR2 },
    {"storer2", STORER2},
};

const auto kCodeToCommand = utils::RevertMap(kCommandToCode);

enum SyscallCode : uint32_t {
    EXIT        = 0,
    SCANINT     = 100,
    SCANDOUBLE  = 101,
    PRINTINT    = 102,
    PRINTDOUBLE = 103,
    GETCHAR     = 104,
    PUTCHAR     = 105,
};

}  // namespace detail

}  // namespace karma
