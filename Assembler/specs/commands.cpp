#include "commands.hpp"

#include <string>
#include <unordered_map>

#include "../utils.hpp"

namespace karma::detail::specs::cmd {

const std::unordered_map<Format, std::string> kFormatToString = {
    {format::RM, "RM"},
    {format::RR, "RR"},
    {format::RI, "RI"},
    {format::J,  "J" },
};

const std::unordered_map<Code, Format> kCodeToFormat = {
    {HALT,    format::RI},
    {SYSCALL, format::RI},
    {ADD,     format::RR},
    {ADDI,    format::RI},
    {SUB,     format::RR},
    {SUBI,    format::RI},
    {MUL,     format::RR},
    {MULI,    format::RI},
    {DIV,     format::RR},
    {DIVI,    format::RI},
    {LC,      format::RI},
    {SHL,     format::RR},
    {SHLI,    format::RI},
    {SHR,     format::RR},
    {SHRI,    format::RI},
    {AND,     format::RR},
    {ANDI,    format::RI},
    {OR,      format::RR},
    {ORI,     format::RI},
    {XOR,     format::RR},
    {XORI,    format::RI},
    {NOT,     format::RI},
    {MOV,     format::RR},
    {ADDD,    format::RR},
    {SUBD,    format::RR},
    {MULD,    format::RR},
    {DIVD,    format::RR},
    {ITOD,    format::RR},
    {DTOI,    format::RR},
    {PUSH,    format::RI},
    {POP,     format::RI},
    {CALL,    format::RR},
    {CALLI,   format::J },
    {RET,     format::J },
    {CMP,     format::RR},
    {CMPI,    format::RI},
    {CMPD,    format::RR},
    {JMP,     format::J },
    {JNE,     format::J },
    {JEQ,     format::J },
    {JLE,     format::J },
    {JL,      format::J },
    {JGE,     format::J },
    {JG,      format::J },
    {LOAD,    format::RM},
    {STORE,   format::RM},
    {LOAD2,   format::RM},
    {STORE2,  format::RM},
    {LOADR,   format::RR},
    {STORER,  format::RR},
    {LOADR2,  format::RR},
    {STORER2, format::RR},
};

const std::unordered_map<std::string, Code> kCommandToCode = {
    {"halt",    HALT   },
    {"syscall", SYSCALL},
    {"add",     ADD    },
    {"addi",    ADDI   },
    {"sub",     SUB    },
    {"subi",    SUBI   },
    {"mul",     MUL    },
    {"muli",    MULI   },
    {"div",     DIV    },
    {"divi",    DIVI   },
    {"lc",      LC     },
    {"shl",     SHL    },
    {"shli",    SHLI   },
    {"shr",     SHR    },
    {"shri",    SHRI   },
    {"and",     AND    },
    {"andi",    ANDI   },
    {"or",      OR     },
    {"ori",     ORI    },
    {"xor",     XOR    },
    {"xori",    XORI   },
    {"not",     NOT    },
    {"mov",     MOV    },
    {"addd",    ADDD   },
    {"subd",    SUBD   },
    {"muld",    MULD   },
    {"divd",    DIVD   },
    {"itod",    ITOD   },
    {"dtoi",    DTOI   },
    {"push",    PUSH   },
    {"pop",     POP    },
    {"call",    CALL   },
    {"calli",   CALLI  },
    {"ret",     RET    },
    {"cmp",     CMP    },
    {"cmpi",    CMPI   },
    {"cmpd",    CMPD   },
    {"jmp",     JMP    },
    {"jne",     JNE    },
    {"jeq",     JEQ    },
    {"jle",     JLE    },
    {"jl",      JL     },
    {"jge",     JGE    },
    {"jg",      JG     },
    {"load",    LOAD   },
    {"store",   STORE  },
    {"load2",   LOAD2  },
    {"store2",  STORE2 },
    {"loadr",   LOADR  },
    {"storer",  STORER },
    {"loadr2",  LOADR2 },
    {"storer2", STORER2},
};

const std::unordered_map<Code, std::string> kCodeToCommand =
    util::RevertMap(kCommandToCode);

}  // namespace karma::detail::specs::cmd